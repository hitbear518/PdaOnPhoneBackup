package com.zsxj.pda.util;

import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.RoundingMode;
import java.net.URL;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PixelFormat;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.Toast;

import com.zsxj.pda.log.Log;
import com.zsxj.pda.log.LogFactory;
import com.zsxj.pda.service.ServicePool;
import com.zsxj.pda.service.config.ConfigAccess;
import com.zsxj.pdaonphone.R;

public class Util {
	
	public static <T> void initSpinner(Context context, Spinner sp, int resId, T[] objects) {
		ArrayAdapter<T> adapter = new ArrayAdapter<T>(context, resId, objects);
		sp.setAdapter(adapter);
	}
	
	public static final boolean checkValidAndToast(Context context, String input) {
		if (TextUtils.isEmpty(input)) {
			Util.toast(context, R.string.stock_can_not_be_empty);
			return false;
		} 
		if (!input.matches("\\d+")) {
			Util.toast(context, R.string.stock_must_be_int);
			return false;
		}
		return true;
	}
	
	public static final String trimDouble(String doubleStr) {
		String returnVal = doubleStr.replaceAll("0+?$", "");
		returnVal = returnVal.replaceAll("[.]$", "");
		return returnVal;
	}
	
	public static final void toast(Context ctx, int resId) {
		Toast.makeText(ctx, resId, Toast.LENGTH_SHORT).show();
	}
	
	public static final void toast(Context ctx, String text) {
		Toast.makeText(ctx, text, Toast.LENGTH_SHORT).show();
	}
	
	private static final SimpleDateFormat sDateFormate = new SimpleDateFormat("yyyy-MM-dd", Locale.CHINA);
	private static final DecimalFormat sDecimalFormat;
	static {
		sDecimalFormat = new DecimalFormat("0.##");
		sDecimalFormat.setRoundingMode(RoundingMode.HALF_UP);
	}
	
	public static Calendar getAWeekAgo() {
		Calendar aWeekAgo = Calendar.getInstance();
		aWeekAgo.add(Calendar.DAY_OF_YEAR, -7);
		return aWeekAgo;
	}
	
	public static String formatDate(Calendar date) {
		return sDateFormate.format(date.getTime());
	}
	
	public static String formatDecimal(float num) {
		return sDecimalFormat.format(num);
	}
	
	protected static Log l = LogFactory.getLog(Util.class);

	/**
	 * get hex string stands for byte[]
	 */
	protected static final String HEXES = "0123456789ABCDEF";
	
	public static String getHexString(byte[] raw) {
		if (raw == null) {
			return null;
		}
		final StringBuilder hex = new StringBuilder(2 * raw.length);
		for (final byte b : raw) {
			hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(
					HEXES.charAt((b & 0x0F)));
		}
		return hex.toString();
	}

	/**
	 * gen full file path based on given file name
	 * 
	 * @param fileName
	 * @param ctx
	 * @return
	 */
	public static String genFilePath(String fileName, Context ctx) {
		StringBuilder sb = new StringBuilder();
		sb.append(ctx.getFilesDir().getAbsolutePath()).append("/")
				.append(fileName);
		return sb.toString();
	}

	/**
	 * get package version
	 * 
	 * @param context
	 * @return
	 */
	public static String getVersionName(Context context) {
		try {
			PackageManager pkgMgr = context.getPackageManager();
			PackageInfo info = pkgMgr.getPackageInfo(context.getPackageName(),
					0);
			return info.versionName;
		} catch (NameNotFoundException e) {
			// should never comes here
		}

		return null;
	}

	/**
	 * device id generated by the very fist device boot
	 * 
	 * @return
	 */
	public static String getDeviceId(Context ctx) {
		TelephonyManager tm = (TelephonyManager) ctx
				.getSystemService(Context.TELEPHONY_SERVICE);
		String deviceId = tm.getDeviceId();
		return deviceId;
		// return Secure.getString(ctx.getContentResolver(), Secure.ANDROID_ID);
	}

	/**
	 * get device IMEI, for cell phone only
	 * 
	 * @param ctx
	 * @return
	 */
	public static String getDeviceIMEI(Context ctx) {
		TelephonyManager tm = (TelephonyManager) ctx
				.getSystemService(Context.TELEPHONY_SERVICE);
		String imei = tm.getDeviceId();
		if (null == imei) {
			WifiManager manager = (WifiManager) ctx.getSystemService(Context.WIFI_SERVICE);
			WifiInfo info = manager.getConnectionInfo();
			String macAddr = info.getMacAddress();
			return macAddr;
		} else {
			return imei;
		}
	}
	
	/**
	 * convert bytes to UTF-8 string
	 * 
	 * @param data
	 * @return
	 */
	public static String toString(byte[] data)
			throws UnsupportedEncodingException {
		return new String(data, "UTF-8");
	}

	/**
	 * get system version
	 * 
	 * @return
	 */
	public static String getSysVer() {
		return Build.VERSION.RELEASE;
	}

	/**
	 * get Screen Width
	 * 
	 * @param context
	 * @return
	 */
	public static int getScreenWidth(Context context) {
		DisplayMetrics dm = new DisplayMetrics();
		((Activity) context).getWindowManager().getDefaultDisplay()
				.getMetrics(dm);
		return dm.widthPixels;
	}

	/**
	 * get Screen height
	 * 
	 * @param context
	 * @return
	 */
	public static int getScreenHeight(Context context) {
		DisplayMetrics dm = new DisplayMetrics();
		((Activity) context).getWindowManager().getDefaultDisplay()
				.getMetrics(dm);
		return dm.heightPixels;
	}

	public static double getScreenDensity(Context context) {
		DisplayMetrics dm = new DisplayMetrics();
		((Activity) context).getWindowManager().getDefaultDisplay()
				.getMetrics(dm);
		return dm.density;
	}

	/**
	 * get clipBitmap
	 * 
	 * @param bitmap
	 * @param resizeWidth
	 * @param resizeHeight
	 * @return
	 */
	public static Bitmap clipBitmap(Bitmap bitmap, int resizeWidth,
			int resizeHeight) {
		Bitmap bmp = null;
		if (bitmap != null) {
			float resizeProportion = ((float) resizeWidth) / resizeHeight;
			int bmpWidth = bitmap.getWidth();
			int bmpHeight = bitmap.getHeight();
			float bmpProportion = ((float) bmpWidth) / bmpHeight;
			int clipWidth = 0;
			int clipHeight = 0;
			int offsetX = 0;
			int offsetY = 0;
			if (resizeProportion < bmpProportion) {
				clipWidth = (int) (((float) resizeWidth * bmpHeight) / resizeHeight);
				clipHeight = bmpHeight;
				offsetX = (bmpWidth - clipWidth) / 2;
			} else {
				clipHeight = (int) ((float) resizeHeight * bmpWidth / resizeWidth);
				clipWidth = bmpWidth;
				offsetY = (bmpHeight - clipHeight) / 2;
			}
			float scaleWidth = ((float) resizeWidth) / clipWidth;
			float scaleHeight = ((float) resizeHeight) / clipHeight;
			Matrix matrix = new Matrix();
			matrix.postScale(scaleWidth, scaleHeight);
			bmp = Bitmap.createBitmap(bitmap, offsetX, offsetY, clipWidth,
					clipHeight, matrix, true);
		}
		return bmp;

	}

	public static boolean isSystemMail(String uid) {
		// system mail uid:
		// $msg->from_uid != '3' && $msg->from_uid != '7508' && $msg->from_uid
		// != '2894338' && $msg->from_uid != '3286106' && $msg->from_uid !=
		// '20631499' && $msg->from_uid !='22910713')

		if (uid.equals("3")) {
			return true;
		} else if (uid.equals("7508")) {
			return true;
		} else if (uid.equals("2894338")) {
			return true;
		} else if (uid.equals("3286106")) {
			return true;
		} else if (uid.equals("20631499")) {
			return true;
		} else if (uid.equals("22910713")) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * 
	 * @param is
	 */
	public static void close(InputStream is) {
		try {
			is.close();
		} catch (Exception e) {
		}
	}

	/**
	 * 
	 * @param os
	 */
	public static void close(OutputStream os) {
		try {
			os.close();
		} catch (Exception e) {
		}
	}

	/**
	 * 
	 * @param writer
	 */
	public static void close(Writer writer) {
		try {
			writer.close();
		} catch (Exception e) {
		}
	}

	/**
	 * Get rounded bitmap
	 * 
	 * @param bitmap
	 * @param roundPx
	 * @return
	 */
	public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, float roundPx) {
		Bitmap bmp = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(),
				Config.ARGB_8888);
		Canvas canvas = new Canvas(bmp);
		final int color = 0xff424242;
		final Paint paint = new Paint();
		final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
		final RectF rectF = new RectF(rect);
		paint.setAntiAlias(true);
		canvas.drawARGB(0, 0, 0, 0);
		paint.setColor(color);
		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);
		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
		canvas.drawBitmap(bitmap, rect, rect, paint);
		if (bitmap.isRecycled()) {
			bitmap.recycle();
		}
		return bmp;
	}

	/**
	 * read data from stream.
	 * 
	 * @param is
	 * @return
	 */
	public static byte[] readDataFromIS(InputStream is) throws IOException {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		byte[] data = new byte[50];
		int readLen = 0;
		while ((readLen = is.read(data)) > 0)
			os.write(data, 0, readLen);
		return os.toByteArray();
	}

	/**
	 * get last section in the URL. Normally this is to get the file name.
	 * 
	 * @param url
	 * @return the last section string
	 */
	public static String lastSectionInURL(URL url) {
		String str = url.getPath();
		String strs[] = str.split("/");
		return strs[strs.length - 1];
	}

	/**
	 * get ver of current app
	 * 
	 * @param context
	 * @return
	 */
	public static String getAppVersionName(Context context) {
		String versionName = "";
		try {
			// ---get the package info---
			PackageManager pm = context.getPackageManager();
			PackageInfo pi = pm.getPackageInfo(context.getPackageName(), 0);
			versionName = pi.versionName;
			if (versionName == null || versionName.length() <= 0) {
				return "";
			}
		} catch (Exception e) {
			l.error("", e);
		}
		return versionName;
	}

	/**
	 * check if there is key for given value in the Map
	 * 
	 * @param map
	 * @param value
	 * @return key for the given value or 'null' if no that key
	 */
	public static Object keyForValue(Map<?, ?> map, Object value) {
		for (Object key : map.keySet())
			if (map.get(key) == value)
				return key;

		return null;
	}

	public static Bitmap drawableToBitmap(Drawable drawable) // drawable 转锟斤拷锟斤�?
																// bitmap
	{
		int width = drawable.getIntrinsicWidth(); // �?drawable 锟侥筹拷锟斤�?
		int height = drawable.getIntrinsicHeight();
		Bitmap.Config config = drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888
				: Bitmap.Config.RGB_565; // �?drawable 锟斤拷锟斤拷色锟斤拷�?
		Bitmap bitmap = Bitmap.createBitmap(width, height, config); // 锟斤拷锟斤拷锟斤拷应
																	// bitmap
		Canvas canvas = new Canvas(bitmap); // 锟斤拷锟斤拷锟斤拷应 bitmap 锟侥伙拷锟斤�?
		drawable.setBounds(0, 0, width, height);
		drawable.draw(canvas); // 锟斤�?drawable 锟斤拷锟捷伙拷锟斤拷锟斤拷锟斤拷锟斤�?
		return bitmap;
	}

	public static Drawable zoomDrawable(Drawable drawable, int resizeWidth,
			int resizeHeight) {
		int width = drawable.getIntrinsicWidth();
		int height = drawable.getIntrinsicHeight();
		Bitmap oldbmp = drawableToBitmap(drawable); // drawable 转锟斤拷锟斤�?bitmap
		Matrix matrix = new Matrix(); // 锟斤拷锟斤拷锟斤拷锟斤拷图片锟矫碉拷 Matrix 锟斤拷锟斤拷
		float scaleWidth = ((float) resizeWidth / width); // 锟斤拷锟斤拷锟斤拷锟脚憋拷锟斤拷
		float scaleHeight = ((float) resizeHeight / height);
		matrix.postScale(scaleWidth, scaleHeight); // 锟斤拷锟斤拷锟斤拷锟脚憋拷锟斤拷
		Bitmap newbmp = Bitmap.createBitmap(oldbmp, 0, 0, width, height,
				matrix, true); // 锟斤拷锟斤拷锟铰碉拷 bitmap 锟斤拷锟斤拷锟斤拷锟斤拷锟角讹拷�?bitmap 锟斤拷锟斤拷锟脚猴拷锟酵�?		
		return new BitmapDrawable(newbmp); // 锟斤�?bitmap 转锟斤拷锟斤�?drawable 锟斤拷锟斤拷锟斤�?
	}

	public static Bitmap zoomBitmap(Bitmap bitmap, int resizeWidth,
			int resizeHeight) {
		int width = bitmap.getWidth();
		int height = bitmap.getHeight();
		Matrix matrix = new Matrix(); // 锟斤拷锟斤拷锟斤拷锟斤拷图片锟矫碉拷 Matrix 锟斤拷锟斤拷
		float scaleWidth = ((float) resizeWidth / width); // 锟斤拷锟斤拷锟斤拷锟脚憋拷锟斤拷
		float scaleHeight = ((float) resizeHeight / height);
		matrix.postScale(scaleWidth, scaleHeight); // 锟斤拷锟斤拷锟斤拷锟脚憋拷锟斤拷
		Bitmap newbmp = Bitmap.createBitmap(bitmap, 0, 0, width, height,
				matrix, true); // 锟斤拷锟斤拷锟铰碉拷 bitmap 锟斤拷锟斤拷锟斤拷锟斤拷锟角讹拷�?bitmap 锟斤拷锟斤拷锟脚猴拷锟酵�?		
		return newbmp; // 锟斤�?bitmap 转锟斤拷锟斤�?drawable 锟斤拷锟斤拷锟斤�?
	}

	/**
	 * generate alert dialog
	 * 
	 * @param ctx
	 * @param titleId
	 * @param msgId
	 * @return
	 */
	public static Dialog genAlertDialog(Context ctx, int titleId, int msgId) {
		AlertDialog dialog = new AlertDialog.Builder(ctx)
				.setIcon(R.drawable.logo).setTitle(titleId)
				.setMessage(msgId).setPositiveButton(/*R.string.ok*/"OK", null)
				.create();
		return dialog;
	}

	public static String CMCC1 = "46000"; // 锟狡讹拷1
	public static String CMCC2 = "46002"; // 锟狡讹拷2
	public static String CU = "46001"; // 锟斤拷�?
	public static String CT = "46003"; // 锟斤拷锟斤拷

	public static String getOperatorCode(Context ctx) {
		TelephonyManager telManager = (TelephonyManager) ctx
				.getSystemService(Context.TELEPHONY_SERVICE);
		String operator = telManager.getSimOperator();
		return operator;
	}

	public static int computeSampleSize(Options options, int minSideLength,
			int maxNumOfPixels) {
		int initialSize = computeInitalSampleSize(options, minSideLength,
				maxNumOfPixels);
		int roundedSize;
		if (initialSize <= 8) {
			roundedSize = 1;
			while (roundedSize < initialSize) {
				roundedSize <<= 1;
			}
		} else {
			roundedSize = (initialSize + 7) / 8 * 8;
		}
		return roundedSize;
	}

	private static int computeInitalSampleSize(Options options,
			int minSideLength, int maxNumOfPixels) {
		double w = options.outWidth;
		double h = options.outHeight;
		int lowerBound = (maxNumOfPixels == -1)?1:(int)Math.ceil(Math.sqrt(w*h/maxNumOfPixels));
		int upperBound = (minSideLength==-1)?128:(int)Math.min(Math.floor(w/minSideLength), Math.floor(h/minSideLength));
		android.util.Log.d("Util", "lowerBound="+lowerBound+" upperBound="+upperBound);
		if(upperBound<lowerBound){
			return upperBound;
		}
		if((maxNumOfPixels==-1)&&(minSideLength==-1)){
			return 1;
		}else if(minSideLength==-1){
			return lowerBound;
		}else{
			return upperBound;
		}
	}

	public static Bitmap tryGetBitmap(String imgFile,int minSideLength,int maxNumOfPixels){
		if(imgFile==null||imgFile.length()==0){
			return null;
		}
		try{
			FileDescriptor fd= new FileInputStream(imgFile).getFD();
			Options options = new Options();
			options.inJustDecodeBounds=true;
			BitmapFactory.decodeFileDescriptor(fd, null, options);
			options.inSampleSize=computeSampleSize(options,minSideLength,maxNumOfPixels);
			try{
				options.inJustDecodeBounds=false;
				Bitmap bmp = BitmapFactory.decodeFile(imgFile,options);
				return bmp;
			}catch(OutOfMemoryError err){
				return null;
			}
		}catch (Exception e){
			return null;
		}
	}
	
	// ---------------------------------- ---------------------------------- 

	public static HashMap<String, String> getUrlParams(String url) {
		
		if (null == url)
			return null;

		if (!(url instanceof String))
			return null;

		if (0 != url.indexOf("http://") && 0 != url.indexOf("https://"))
			return null;
		
		int qmIdx = url.indexOf("#");
		if (-1 != qmIdx) {
			
			String sParams = url.substring(qmIdx + 1);
			String sTmp;
			HashMap<String, String> map = new HashMap<String, String>();
			
			while (true) {
				
				int paramIdx = sParams.indexOf("&");
				if (-1 != paramIdx) {
					sTmp = sParams.substring(0, paramIdx);
					sParams = sParams.substring(paramIdx + 1);
				} else {
					sTmp = sParams;
					sParams = null;
				}
				
				int eIdx = sTmp.indexOf("=");
				if (-1 != eIdx)
					map.put(sTmp.substring(0, eIdx), sTmp.substring(eIdx + 1));
				
				if (null == sParams || 0 == sParams.length())
					break;
			}
			
			return map;
		}
		
		return null;
	}
	
	public static class ComparatorName implements Comparator<String> {
		
		public int compare(String arg0, String arg1) {
			
			String name0 = (String)arg0;
			String name1 = (String)arg1;
			
			return name0.compareTo(name1);
		}
	}
	
	public static String signParams(JSONObject params) {
		
		ArrayList<String> names = new ArrayList<String>();
		for(Iterator<String> it = params.keys(); it.hasNext();) {
			names.add(it.next());
		}

		ComparatorName comparator = new ComparatorName();
		Collections.sort(names, comparator);
		
		try {
			StringBuffer sb = new StringBuffer();
			// Names 
			for (int i = 0; i < names.size(); i++) {
//				System.out.println("asdfasdf names.get(" + i + ")=" + names.get(i));
				sb.append(names.get(i));
				sb.append(params.get(names.get(i)));
			}
			// Secret 
			sb.append(ServicePool.getinstance().getConfig().getConfig(ConfigAccess.SECRET));
			
			return MD5.md5(sb.toString());
			
		} catch (JSONException e) {
			return "";
		}
	}
	
	public static String getRequestParams(JSONObject params) {
		
		try {
			StringBuffer sb = new StringBuffer();
			for(Iterator<String> it = params.keys(); it.hasNext();) {
				String name = it.next();
				Object value = params.get(name);
				if (name.equalsIgnoreCase("nick") 
						|| name.equalsIgnoreCase("q")) {
					value = URLEncoder.encode((String)value, "UTF-8");
				}
				sb.append("&").append(name).append("=").append(value);
			}
			sb.append("&").append("sign").append("=").append(Util.signParams(params));
			
			sb.deleteCharAt(0);
			
			return sb.toString();
			
		} catch (JSONException e) {
			return "";
		} catch (UnsupportedEncodingException e) {
			return "";
		}
	}
	// ---------------------------------- ---------------------------------- 
	
}
